---


- name: Creating a 4GB swap file
  command: fallocate -l 4G /swapfile
  register: write_swapfile
  when: ansible_memory_mb.real.total + ansible_memory_mb.swap.total < 4096
  ignore_errors: yes


- name: Set swap file permissions
  file:
    path: /swapfile
    mode: 0600
  when: write_swapfile.changed
  ignore_errors: yes


- name: Build swapfile
  command: mkswap /swapfile
  when: write_swapfile.changed
  ignore_errors: yes


- name: Enable swapfile
  command: swapon /swapfile
  when: write_swapfile.changed
  ignore_errors: yes


- name: Add swapfile to /etc/fstab
  lineinfile: dest=/etc/fstab line="/swapfile   none    swap    sw    0   0" state=present
  when: write_swapfile.changed

- name: Update all packages to the latest version
  apt:
    upgrade: dist

- name: Add Certbot PPA
  apt_repository:
    repo: ppa:certbot/certbot
    state: present
    update_cache: yes

- name: Install required packages
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - docker.io
    - apt-transport-https
    - lsb-release
    - curl
    - fail2ban
    - unattended-upgrades
    - ufw
    - certbot
  register: install_packages


- name: Start docker
  service:
    name: docker
    state: started
    enabled: yes


- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    recurse: yes
  with_items:
    - /mnt/zen/config
    - /mnt/zen/data
    - /mnt/zen/zcash-params
    - /mnt/zen/certs

- name: Remove acme-sh from systemd
  file:
    path: "/etc/systemd/system/acme-sh.service"
    state: absent
  register: acme

- name: Disable acme-sh
  service:
    name: acme-sh
    state: stopped
    enabled: no
  when: acme.changed

- name: "Check if certificate for {{ fqdn }} exists"
  stat:
    path: "/etc/letsencrypt/live/{{ fqdn }}/cert.pem"
  register: letsencrypt_cert

- name: Generate new certificate if one doesn't exist.
  shell: "certbot certonly --standalone --noninteractive --agree-tos --email {{ cert_email }} -d {{ cert_domain }}"
  when: not letsencrypt_cert.stat.exists

- name: Open permissions on cert directory
  file:
    path: "/etc/letsencrypt/"
    state: directory
    mode: 0755
    recurse: yes

- name: Creating the secnode config...
  file:
    path: /mnt/zen/secnode
    state: directory
    mode: 0755
    recurse: yes


- name: Generate random rpcpassword
  shell: |
    if [ -f /mnt/zen/secnode/rpcpassword ]; then
      cat /mnt/zen/secnode/rpcpassword
    else
      head -c 32 /dev/urandom | base64
    fi
  register: rpcpassword

- name: Installing zen-node service
  template:
    src: zen-node.service
    dest: "/etc/systemd/system/zen-node.service"
  register: write_zen_node

- name: Installing zen-secnodetracker service
  template:
    src: zen-secnodetracker.service
    dest: "/etc/systemd/system/zen-secnodetracker.service"
  register: write_zen_node_tracker

- name: Install zenupdate service
  template:
    src: zenupdate.service
    dest: "/lib/systemd/system/zenupdate.service"
  register: write_zen_updater

- name: Install zenupdate cron service
  template:
    src: zenupdate.timer
    dest: "/lib/systemd/system/zenupdate.timer"
  register: write_zen_timer

- name: reload systemd for zen containers
  systemd: 
    daemon_reload: yes
  when: write_zen_node.changed or write_zen_node_tracker.changed or write_zen_updater.changed or write_zen_timer.changed 

- name: Set the servers env
  set_fact:
    servers: "{% if nodetype=='super' %}xns{% else %}ts{% endif %}"

- name: Set server public IP addresses
  set_fact:
    externalIP_list: "$(dig $fqdn A $fqdn AAAA +short) "

- name: Creating the zen secnode configuration
  template:
    src: config.json.j2
    dest: "/mnt/zen/secnode/config.json"
  notify: restart_zen-secnodetracker

- name: Creating the zen configuration
  template:
    src: zen.conf.j2
    dest: "/mnt/zen/config/zen.conf"
  notify: restart_zen-node

- name: Enabling and starting zen-node container services...
  service:
    name: zen-node
    state: started
    enabled: yes

- name: Enabling and starting zen-secnodetracker container services...
  service:
    name: zen-secnodetracker
    state: started
    enabled: yes

- name: Disabling existing certbot timer...
  systemd:
    name: certbot.timer
    state: stopped
    enabled: no

- name: Enabling and starting the zenupdate service...
  service:
    name: zenupdate
    state: started
    enabled: yes

- name: Enabling and starting the zenupdate timer...
  systemd:
    name: zenupdate.timer
    state: started
    enabled: yes

- name: Configure ufw defaults
  ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  with_items:
    - { direction: 'incoming', policy: 'deny' }
    - { direction: 'outgoing', policy: 'allow' }
  when: install_packages.changed


- name: Configure ufw rules
  ufw:
    rule: "{{ item.rule }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  with_items:
    - { rule: 'allow', port: '{{ ssh_port | default("22") }}', proto: 'tcp' }
    - { rule: 'limit', port: '{{ ssh_port | default("22") }}', proto: 'tcp' }
    - { rule: 'allow', port: '80', proto: 'tcp' }
    - { rule: 'allow', port: '443', proto: 'tcp' }
    - { rule: 'allow', port: '9033', proto: 'tcp' }
  when: install_packages.changed


- name: ufw enable
  command: ufw --force enable
  when: install_packages.changed

- name: Enabling fail2ban services...
  service:
    name: fail2ban
    state: started
    enabled: yes
  when: install_packages.changed


- name: Waiting for node to fetch params ...
  command: docker exec zen-node /usr/local/bin/gosu user zen-cli getinfo
  register: fetch_param_result
  until: fetch_param_result.rc == 0
  retries: 100
  delay: 30


- name: Generate shield address
  shell: |
    if [ $(docker exec zen-node /usr/local/bin/gosu user zen-cli z_listaddresses | wc -l) -eq 2 ]; then
      docker exec zen-node /usr/local/bin/gosu user zen-cli z_getnewaddress
      systemctl restart zen-secnodetracker
    fi

- name: Get current block
  shell: |
    docker exec zen-node /usr/local/bin/gosu user zen-cli getinfo | grep \"blocks\" | tr -d \",
  register: zenblock

- name: Get shield address
  shell: |
    docker exec zen-node /usr/local/bin/gosu user zen-cli z_listaddresses | tr -d []\"' '
  register: zenshield

- name: Get shield address balance
  shell: |
    docker exec zen-node /usr/local/bin/gosu user zen-cli z_gettotalbalance | tr -d {}\",
  register: zenbalance

- set_fact:
    zenblock: "{{ zenblock.stdout }}"
    zenshield: "{{ zenshield.stdout }}"
    zenbalance: "{{ zenbalance.stdout }}"
